{"/home/travis/build/npmtest/node-npmtest-apiai/test.js":"/* istanbul instrument in package npmtest_apiai */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apiai/lib.npmtest_apiai.js":"/* istanbul instrument in package npmtest_apiai */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apiai = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apiai = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apiai/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apiai && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apiai */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apiai\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apiai.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apiai.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apiai.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apiai.__dirname + '/lib.npmtest_apiai.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/index.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nmodule.exports = require(\"./module/apiai\");","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/apiai.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar https = require('https');\nvar http = require('http');\n\nvar ContextsRequest = require('./contexts_request').ContextsRequest;\nvar DeleteContextsRequest = require('./delete_contexts_request').DeleteContextsRequest;\nvar TextRequest = require('./text_request').TextRequest;\nvar EventRequest = require('./event_request').EventRequest;\nvar VoiceRequest = require('./voice_request').VoiceRequest;\nvar UserEntitiesRequest = require('./user_entities_request').UserEntitiesRequest;\nvar TTSRequest = require('./tts_request').TTSRequest;\n\n/**\n * Module variables.\n * @private\n */\n\nvar version = '20150910';\nvar language = 'en';\nvar hostname = 'api.api.ai';\nvar endpoint = '/v1/';\nvar defaultSource = 'node';\n\n/**\n * Module exports.\n * @public\n */\n\nexports = module.exports = createApplication;\n\n/**\n * Old version function for creation application instance.\n * @param  {string} clientAccessToken Access token. You can get it on https://api.ai\n * @param  {string} subscriptionKey   Subscribtion key. It has not been used anymore.\n * @param  {object} _options          Default option for apllication.\n * @return {Application}              [description]\n */\nfunction createApplicationDeprecated(clientAccessToken, subscriptionKey, _options) {\n    var options = _options || {};\n\n    if (!clientAccessToken) {\n        throw new Error('\\'clientAccessToken\\' cannot be empty.');\n    }\n\n    return new Application(clientAccessToken, options);\n}\n\n/**\n * New version function for creation application instance.\n * @param  {string} clientAccessToken Access token. You can get it on https://api.ai\n * @param  {string} subscriptionKey   Subscribtion key. It has not been used anymore.\n * @param  {object} _options          Default option for apllication.\n * @return {Application}              [description]\n */\nfunction createApplicationNew(clientAccessToken, _options) {\n    var options = _options || {};\n\n    if (!clientAccessToken) {\n        throw new Error('\\'clientAccessToken\\' cannot be empty.');\n    }\n\n    return new Application(clientAccessToken, options);\n}\n\n/**\n * Create an api.ai application.\n *\n * @param {*} args [description]\n * @return {Function}\n * @api public\n */\nfunction createApplication() {\n    if (arguments.length > 1) {\n        if (typeof arguments[1] == \"string\") {\n            return createApplicationDeprecated.apply(this, arguments);\n        } else if (typeof arguments[1] == \"object\") {\n            return createApplicationNew.apply(this, arguments);\n        } else {\n            throw new Error('Wrong parameters of initialization.');\n        }\n    } else {\n        return createApplicationNew.apply(this, arguments);\n    }\n}\n\nfunction Application (clientAccessToken, options) {\n    var self = this;\n\n    self.language = options.language || language;\n\n    self.clientAccessToken = clientAccessToken;\n\n    self.hostname = options.hostname || hostname;\n    self.version = options.version || version;\n\n    self.endpoint = options.endpoint || endpoint;\n    self.requestSource = options.requestSource || defaultSource;\n\n    if ('secure' in options) {\n        self.secure = options.secure;\n    } else {\n        self.secure = true;\n    }\n\n    var _http = self.secure ? https : http;\n    self._agent = new _http.Agent({ keepAlive: true });\n}\n\nApplication.prototype.contextsRequest = function(contexts, options) {\n    var self = this;\n\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    return new ContextsRequest(self, contexts, opt);\n};\n\n/**\n * Delete/Reset all contexts for session by ID.\n * @param  {object} options Options for DeleteContextsRequest. Should contain sessionId.\n * @return {ContextsRequest}           Returns a ContextsRequest object.\n */\nApplication.prototype.deleteContextsRequest = function(options) {\n    var self = this;\n\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    return new DeleteContextsRequest(self, opt);\n}\n\n/**\n * [textRequest description]\n * @param  {[type]} query   [description]\n * @param  {[type]} options [description]\n * @return {[type]}         [description]\n */\nApplication.prototype.textRequest = function(query, options) {\n    var self = this;\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    if (!('version' in opt)) {\n        opt.version = self.version;\n    }\n\n    return new TextRequest(self, query, opt);\n};\n\nApplication.prototype.eventRequest = function(event, options) {\n    var self = this;\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    if (!('version' in opt)) {\n        opt.version = self.version;\n    }\n\n    return new EventRequest(self, event, opt);\n};\n\n/**\n * Make voice request object.\n * @param  {object} [options={}] Optionos for voice request.\n * @param  {string} [options.endpoint] [description]\n * @param  {string} [options.version] [description]\n * @return {VoiceRequest}         [description]\n * @deprecated since version 2.0\n */\nApplication.prototype.voiceRequest = function(options) {\n    var self = this;\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    if (!('version' in opt)) {\n        opt.version = self.version;\n    }\n\n    return new VoiceRequest(self, opt);\n};\n\n/**\n * [userEntitiesRequest description]\n * @param  {[type]} user_entities_body  [description]\n * @param  {[type]} options             [description]\n * @return {[type]}                     [description]\n */\nApplication.prototype.userEntitiesRequest = function(user_entities_body, options) {\n    var self = this;\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    return new UserEntitiesRequest(self, user_entities_body, opt);\n};\n\nApplication.prototype.ttsRequest = function(text, options) {\n    var self = this;\n    var opt = options || {};\n\n    if (!('endpoint' in opt)) {\n        opt.endpoint = self.endpoint;\n    }\n\n    return new TTSRequest(self, text, opt);\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/contexts_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar JSONApiRequest = require('./json_api_request').JSONApiRequest;\nvar util = require('util');\n\nexports.ContextsRequest = module.exports.ContextsRequest = ContextsRequest;\n\nutil.inherits(ContextsRequest, JSONApiRequest);\n\nfunction ContextsRequest(application, contexts, options) {\n    var self = this;\n\n    self.contexts = contexts;\n    self.sessionId = options.sessionId;\n\n    ContextsRequest.super_.apply(this, [application, options]);\n}\n\nContextsRequest.prototype._headers = function() {\n    var headers = ContextsRequest.super_.prototype._headers.apply(this, arguments);\n\n    headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    return headers;\n};\n\nContextsRequest.prototype._requestOptions = function() {\n    var request_options = ContextsRequest.super_.prototype._requestOptions.apply(this, arguments);\n\n    request_options.path = this.endpoint + 'contexts?sessionId=' + this.sessionId;\n    request_options.method = 'POST';\n\n    return request_options;\n};\n\nContextsRequest.prototype.end = function() {\n    var self = this;\n\n    self.write(JSON.stringify(self.contexts));\n\n    ContextsRequest.super_.prototype.end.apply(this, arguments);\n};","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/json_api_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar Request = require('./request').Request;\nvar util = require('util');\n\nvar ServerError = require('./exceptions').ServerError;\n\nexports.JSONApiRequest = module.exports.JSONApiRequest = JSONApiRequest;\n\nutil.inherits(JSONApiRequest, Request);\n\nfunction JSONApiRequest () {\n    JSONApiRequest.super_.apply(this, arguments);\n}\n\nJSONApiRequest.prototype._handleResponse = function(response) {\n    var self = this;\n\n    var body = '';\n\n    response.on('data', function(chunk) {\n        body += chunk;\n    });\n\n    response.on('end', function() {\n        if (response.statusCode >= 200 && response.statusCode <= 299) {\n            try {\n                    var json_body = JSON.parse(body);\n                    self.emit('response', json_body);\n                } catch (error) {\n                    // JSON.parse can throw only one exception, SyntaxError\n                    // All another exceptions throwing from user function,\n                    // because it just rethrowing for better error handling.\n\n                    if (error instanceof SyntaxError) {\n                        self.emit('error', error);\n                    } else {\n                        throw error;\n                    }\n                }\n        } else {\n            var error = new ServerError(response.statusCode, body, 'Wrong response status code.');\n            self.emit('error', error);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar https = require('https');\nvar http = require('http');\n\nexports.Request = module.exports.Request = Request;\n\nutil.inherits(Request, EventEmitter);\n\nfunction Request (application, options) {\n    var self = this;\n\n    self.clientAccessToken = application.clientAccessToken;\n\n    self.hostname = application.hostname;\n\n    self.endpoint = options.endpoint;\n    self.requestSource = application.requestSource;\n\n    var _http = application.secure ? https : http;\n\n    var requestOptions = self._requestOptions();\n\n    requestOptions.agent = application._agent;\n\n    var request = _http.request(requestOptions, function(response) {\n        self._handleResponse(response);\n    });\n\n    request.on('error', function(error) {\n        self.emit('error', error);\n    });\n\n    self.request = request;\n}\n\nRequest.prototype._handleResponse = function(response) {\n    throw new Error(\"Can't call abstract method!\");\n};\n\nRequest.prototype._headers = function() {\n    var self = this;\n\n    return {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + self.clientAccessToken,\n        'api-request-source': self.requestSource\n    };\n};\n\nRequest.prototype._requestOptions = function() {\n    var self = this;\n\n    return {\n        hostname: self.hostname,\n        headers: self._headers(),\n    };\n};\n\nRequest.prototype.write = function(chunk) {\n    this.request.write(chunk);\n};\n\nRequest.prototype.end = function() {\n    this.request.end();\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/exceptions.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar util = require('util');\n\nexports.ServerError = module.exports.ServerError = ServerError;\n\nutil.inherits(ServerError, Error);\n\nfunction ServerError (statusCode, responseBody, message) {\n    var self = this;\n\n    Error.captureStackTrace(this, ServerError);\n\n    self.statusCode = statusCode;\n    self.responseBody = responseBody;\n\n    this.name = this.constructor.name;\n    this.message = message;\n\n    ServerError.super_.apply(this, []);\n}\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/delete_contexts_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar JSONApiRequest = require('./json_api_request').JSONApiRequest;\nvar util = require('util');\n\nexports.DeleteContextsRequest = module.exports.DeleteContextsRequest = DeleteContextsRequest;\n\nutil.inherits(DeleteContextsRequest, JSONApiRequest);\n\nfunction DeleteContextsRequest(application, options) {\n    var self = this;\n\n    self.sessionId = options.sessionId;\n\n    DeleteContextsRequest.super_.apply(this, [application, options]);\n}\n\nDeleteContextsRequest.prototype._headers = function() {\n    var headers = DeleteContextsRequest.super_.prototype._headers.apply(this, arguments);\n\n    headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    return headers;\n};\n\nDeleteContextsRequest.prototype._requestOptions = function() {\n    var request_options = DeleteContextsRequest.super_.prototype._requestOptions.apply(this, arguments);\n\n    request_options.path = this.endpoint + 'contexts?sessionId=' + this.sessionId;\n    request_options.method = 'DELETE';\n\n    return request_options;\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/text_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar QueryRequest = require('./query_request').QueryRequest;\nvar util = require('util');\n\nexports.TextRequest = module.exports.TextRequest = TextRequest;\n\nutil.inherits(TextRequest, QueryRequest);\n\nfunction TextRequest (application, query, options) {\n    TextRequest.super_.apply(this, [application, options]);\n\n    var self = this;\n    self.query = query;\n}\n\nTextRequest.prototype._headers = function() {\n    var headers = TextRequest.super_.prototype._headers.apply(this, arguments);\n\n    headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    return headers;\n};\n\nTextRequest.prototype._jsonRequestParameters = function() {\n    var self = this;\n\n    var json = TextRequest.super_.prototype._jsonRequestParameters.apply(this, arguments);\n\n    json.query = self.query;\n\n    return json;\n};\n\nTextRequest.prototype.end = function() {\n    var self = this;\n\n    self.write(JSON.stringify(self._jsonRequestParameters()));\n\n    TextRequest.super_.prototype.end.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/query_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar JSONApiRequest = require('./json_api_request').JSONApiRequest;\nvar util = require('util');\n\nexports.QueryRequest = module.exports.QueryRequest = QueryRequest;\n\nutil.inherits(QueryRequest, JSONApiRequest);\n\nfunction QueryRequest (application, options) {\n    var self = this;\n\n    self.language = application.language;\n\n    if ('timezone' in options) {\n        self.timezone = options.timezone;\n    }\n\n    if ('resetContexts' in options) {\n        self.resetContexts = options.resetContexts;\n    }\n\n    if ('contexts' in options) {\n        self.contexts = options.contexts;\n    }\n\n    if ('entities' in options) {\n        self.entities = options.entities;\n    }\n\n    if ('sessionId' in options) {\n        self.sessionId = options.sessionId;\n    } else {\n        throw Error(\n            'Now \\'sessionId\\' is required parameter. Please add this parameter to \\'options\\' of request.\\n' +\n            'Like following example:\\n' +\n            '> var app = ...\\n' +\n            '> request = app.textRequest(\"Hello\", {sessionId: \"UNIQUE_SESSION_ID\"})\\n' +\n            '> ... \\n'\n        );\n    }\n\n    if ('version' in options) {\n        self.version = options.version;\n    }\n\n    if ('requestSource' in application) {\n        self.requestSource = application.requestSource;\n    }\n\n    if ('originalRequest' in options) {\n        self.originalRequest = options.originalRequest;\n    }\n\n    QueryRequest.super_.apply(this, arguments);\n}\n\nQueryRequest.prototype._requestOptions = function() {\n    var self = this;\n\n    var path = 'query';\n\n    if (self.hasOwnProperty(\"version\")) {\n        path += '?v=' + self.version;\n    }\n\n    var request_options = QueryRequest.super_.prototype._requestOptions.apply(this, arguments);\n\n    request_options.path = self.endpoint + path;\n    request_options.method = 'POST';\n\n    return request_options;\n};\n\nQueryRequest.prototype._jsonRequestParameters = function() {\n    var self = this;\n\n    var json = {\n        'lang': self.language,\n        'timezone': self.timezone\n    };\n\n    if ('resetContexts' in self) {\n        json.resetContexts = self.resetContexts;\n    }\n\n    if ('contexts' in self) {\n        json.contexts = self.contexts;\n    }\n\n    if ('entities' in self) {\n        json.entities = self.entities;\n    }\n\n    if ('sessionId' in self) {\n        json.sessionId = self.sessionId;\n    }\n\n    if ('originalRequest' in self) {\n        json.originalRequest = self.originalRequest;\n    }\n\n    return json;\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/event_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar QueryRequest = require('./query_request').QueryRequest;\nvar util = require('util');\n\nexports.EventRequest = module.exports.EventRequest = EventRequest;\n\nutil.inherits(EventRequest, QueryRequest);\n\nfunction EventRequest(application, event, options) {\n    EventRequest.super_.apply(this, [application, options]);\n\n    var self = this;\n    self.event = event;\n}\n\nEventRequest.prototype._headers = function() {\n    var headers = EventRequest.super_.prototype._headers.apply(this, arguments);\n\n    headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    return headers;\n};\n\nEventRequest.prototype._jsonRequestParameters = function() {\n    var self = this;\n\n    var json = EventRequest.super_.prototype._jsonRequestParameters.apply(this, arguments);\n\n    json.event = self.event;\n\n    return json;\n};\n\nEventRequest.prototype.end = function() {\n    var self = this;\n\n    self.write(JSON.stringify(self._jsonRequestParameters()));\n\n    EventRequest.super_.prototype.end.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/voice_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar QueryRequest = require('./query_request').QueryRequest;\nvar util = require('util');\n\nexports.VoiceRequest = module.exports.VoiceRequest = VoiceRequest;\n\nvar CRLF = '\\r\\n';\n\nutil.inherits(VoiceRequest, QueryRequest);\n\nfunction VoiceRequest (application, options) {\n    var self = this;\n    self.boundary = self._generateBoundary();\n\n    VoiceRequest.super_.apply(this, [application, options]);\n\n    self._sendMetaData();\n}\n\nVoiceRequest.prototype._generateBoundary = function() {\n    return (new Date()).getTime().toString();\n};\n\nVoiceRequest.prototype._headers = function() {\n    var self = this;\n\n    var headers = VoiceRequest.super_.prototype._headers.apply(this, arguments);\n\n    headers['Content-Type'] = 'multipart/form-data; boundary=' + self.boundary;\n    headers['Transfer-Encoding'] = 'chunked';\n\n    return headers;\n};\n\nVoiceRequest.prototype._sendMetaData = function() {\n    var self = this;\n\n    var data = '--' + self.boundary + CRLF;\n    data += 'Content-Disposition: form-data; name=\"request\"' + CRLF;\n    data += \"Content-Type: application/json\" + CRLF + CRLF;\n\n    data += JSON.stringify(self._jsonRequestParameters());\n\n    data += CRLF + '--' + self.boundary + CRLF;\n    data += 'Content-Disposition: form-data; name=\"voiceData\"' + CRLF;\n    data += 'Content-Type: audio/wav' + CRLF + CRLF;\n\n    self.write(data);\n};\n\nVoiceRequest.prototype.end = function() {\n    var self = this;\n\n    var lastDataChunk = CRLF + '--' + self.boundary + '--' + CRLF;\n\n    self.write(lastDataChunk);\n\n    VoiceRequest.super_.prototype.end.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/user_entities_request.js":"/*!\n * apiai\n * Copyright(c) 2015 http://api.ai/\n * Apache 2.0 Licensed\n */\n\n'use strict';\n\nvar JSONApiRequest = require('./json_api_request').JSONApiRequest;\nvar util = require('util');\n\nexports.UserEntitiesRequest = module.exports.UserEntitiesRequest = UserEntitiesRequest;\n\nutil.inherits(UserEntitiesRequest, JSONApiRequest);\n\nfunction UserEntitiesRequest(application, user_entities_body, options) {\n    var self = this;\n\n    self.user_entities_body = user_entities_body;\n\n    UserEntitiesRequest.super_.apply(this, [application, options]);\n}\n\nUserEntitiesRequest.prototype._headers = function() {\n    var headers = UserEntitiesRequest.super_.prototype._headers.apply(this, arguments);\n\n    headers['Content-Type'] = 'application/json; charset=utf-8';\n\n    return headers;\n};\n\nUserEntitiesRequest.prototype._requestOptions = function() {\n    var request_options = UserEntitiesRequest.super_.prototype._requestOptions.apply(this, arguments);\n\n    request_options.path = this.endpoint + 'userEntities';\n    request_options.method = 'POST';\n\n    return request_options;\n};\n\nUserEntitiesRequest.prototype.end = function() {\n    var self = this;\n\n    if (\n        (!('user_entities_body' in self)) ||\n        (!('entities' in self.user_entities_body))\n       )\n    {\n        throw Error(\n            'Data format for user untities request was changed. \\n' +\n            'See details: https://docs.api.ai/docs/userentities \\n' +\n            '...or see examples.'\n        );\n    }\n\n    self.write(JSON.stringify(self.user_entities_body));\n\n    UserEntitiesRequest.super_.prototype.end.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-apiai/node_modules/apiai/module/tts_request.js":"/*!\r\n * apiai\r\n * Copyright(c) 2015 http://api.ai/\r\n * Apache 2.0 Licensed\r\n */\r\n\r\n'use strict';\r\n\r\nvar Request = require('./request').Request;\r\nvar util = require('util');\r\n\r\nexports.TTSRequest = module.exports.TTSRequest = TTSRequest;\r\n\r\nutil.inherits(TTSRequest, Request);\r\n\r\nfunction TTSRequest(application, text, options) {\r\n    var self = this;\r\n\r\n    self.text = text;\r\n\r\n    self.language = options.language || options.lang || 'en-US';\r\n\r\n    if('writeStream' in options){\r\n        self.writeStream = options.writeStream;\r\n    } else {\r\n        throw new Error('\\'writeStream\\' cannot be empty.');\r\n    }\r\n\r\n    TTSRequest.super_.apply(this, [application, options]);\r\n}\r\n\r\nTTSRequest.prototype._headers = function() {\r\n    var self = this;\r\n    var headers = TTSRequest.super_.prototype._headers.apply(this, arguments);\r\n\r\n    headers['Accept-Language'] = self.language;\r\n\r\n    return headers;\r\n};\r\n\r\nTTSRequest.prototype._requestOptions = function() {\r\n    var self = this;\r\n    var request_options = TTSRequest.super_.prototype._requestOptions.apply(this, arguments);\r\n\r\n    request_options.path = self.endpoint + 'tts?text=' + encodeURI(self.text);\r\n    request_options.method = 'GET';\r\n\r\n    return request_options;\r\n};\r\n\r\nTTSRequest.prototype._handleResponse = function(response) {\r\n    var self = this;\r\n    response.pipe(self.writeStream);\r\n};\r\n\r\n"}